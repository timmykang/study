from Crypto.Util.number import *
c = 78643169701772559588799235367819734778096402374604527417084323620408059019575192358078539818358733737255857476385895538384775148891045101302925145675409962992412316886938945993724412615232830803246511441681246452297825709122570818987869680882524715843237380910432586361889181947636507663665579725822511143923
n = 420908150499931060459278096327098138187098413066337803068086719915371572799398579907099206882673150969295710355168269114763450250269978036896492091647087033643409285987088104286084134380067603342891743645230429893458468679597440933612118398950431574177624142313058494887351382310900902645184808573011083971351
'''
def find_factor(N):
    F.<x> = PolynomialRing(Zmod(N), implementation='NTL')
    i = 1
    while(1):
        poly = x*(1<<400)+i
        poly = poly.monic()
        roots = poly.small_roots(beta=0.5)
        if len(roots)>0:
            for root in roots:
                q = int(root) * (1<<400)+i
                p = int(N) / int(q)
                return p,q
        i=i+1
p,q = (find_factor(n))
'''
(p,q) = (10718841513477905819120058147135847238291365362593720675636253771082993743788743083816117407101738585993985506647694375447285228211151896705183442597773779L, 39268063621491165558293370755773815300739539018598511154583095766289789691669875090357609442626770422364550257841199885538175542665396553281747272813511469)
F.<x> = PolynomialRing(Zmod(p), implementation='NTL')
poly = x^3 - c
F.<y> = PolynomialRing(Zmod(q), implementation='NTL')
poly2 = y^3 - c
proots=[]
qroots=[]
for i in poly.roots():
    proots.append(i[0])
for i in poly2.roots():
    qroots.append(i[0])

for i in proots:
    for j in qroots:
        flag = long_to_bytes(CRT(int(i),int(j),int(p),int(q)))
        if('ASIS' in flag):
            print(flag)

#ASIS{h0W_D0_3-th_R0Ot___3XtR4cT10n___AL90r17Hm_iN_Fq!!!?}





# This file was *autogenerated* from the file sol.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_129267954332200676615739227295907855158658739979210900708976549380609989409956408435684374935748935918839455337906315852534764123844258593239440161506513191263699117749750762173637210021984649302676930074737438675523494086114284695245002078910492689149197954131695708624630827382893369282116803593958219295071 = Integer(129267954332200676615739227295907855158658739979210900708976549380609989409956408435684374935748935918839455337906315852534764123844258593239440161506513191263699117749750762173637210021984649302676930074737438675523494086114284695245002078910492689149197954131695708624630827382893369282116803593958219295071); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_1719620105458406433483340568317543019584575635895742560438771105058321655238562613083979651479555788009994557822024565226932906295208262756822275663694110 = Integer(1719620105458406433483340568317543019584575635895742560438771105058321655238562613083979651479555788009994557822024565226932906295208262756822275663694110); _sage_const_2 = Integer(2); _sage_const_65537 = Integer(65537); _sage_const_123828011786345664757585942310038992331055176660679165398920365204623335291878173959876308977115607518900415801962848580747200997185606420410437572095447682798017319498742987210291931673054112968527192210375048958877146513037193636705010232608708929769672565897606711155251354598146987357344810260248226805138 = Integer(123828011786345664757585942310038992331055176660679165398920365204623335291878173959876308977115607518900415801962848580747200997185606420410437572095447682798017319498742987210291931673054112968527192210375048958877146513037193636705010232608708929769672565897606711155251354598146987357344810260248226805138); _sage_const_10 = Integer(10); _sage_const_0p5 = RealNumber('0.5'); _sage_const_6469693230 = Integer(6469693230); _sage_const_50 = Integer(50)
from Crypto.Util.number import *
a = _sage_const_1719620105458406433483340568317543019584575635895742560438771105058321655238562613083979651479555788009994557822024565226932906295208262756822275663694110 
b = _sage_const_6469693230 
n = _sage_const_129267954332200676615739227295907855158658739979210900708976549380609989409956408435684374935748935918839455337906315852534764123844258593239440161506513191263699117749750762173637210021984649302676930074737438675523494086114284695245002078910492689149197954131695708624630827382893369282116803593958219295071 
enc = _sage_const_123828011786345664757585942310038992331055176660679165398920365204623335291878173959876308977115607518900415801962848580747200997185606420410437572095447682798017319498742987210291931673054112968527192210375048958877146513037193636705010232608708929769672565897606711155251354598146987357344810260248226805138 

F = PolynomialRing(Zmod(n), implementation = 'NTL', names=('x',)); (x,) = F._first_ngens(1)
tmp = a // b
for r in range(_sage_const_10 **_sage_const_3 , _sage_const_3 *_sage_const_10 **_sage_const_3 , _sage_const_2 ):
    poly = x * tmp - r
    poly = poly.monic()
    roots = poly.small_roots(beta=_sage_const_0p5 ,X=_sage_const_2 **_sage_const_50 )
    if(len(roots) > _sage_const_0 ):
        print(roots)
        p = int(roots[_sage_const_0 ] * tmp - r)
        q = int(int(n) / p)
        print p
        print q
        phin = (p-_sage_const_1 ) * (q-_sage_const_1 )
        d = inverse(_sage_const_65537 , phin)
        print(long_to_bytes(pow(enc,d,n)))


from Crypto.Util.number import *
a = 1719620105458406433483340568317543019584575635895742560438771105058321655238562613083979651479555788009994557822024565226932906295208262756822275663694110
b = 6469693230
n = 129267954332200676615739227295907855158658739979210900708976549380609989409956408435684374935748935918839455337906315852534764123844258593239440161506513191263699117749750762173637210021984649302676930074737438675523494086114284695245002078910492689149197954131695708624630827382893369282116803593958219295071
enc = 123828011786345664757585942310038992331055176660679165398920365204623335291878173959876308977115607518900415801962848580747200997185606420410437572095447682798017319498742987210291931673054112968527192210375048958877146513037193636705010232608708929769672565897606711155251354598146987357344810260248226805138

F.<x> = PolynomialRing(Zmod(n), implementation = 'NTL')
tmp = a // b
for r in range(10**3, 3*10**3, 2):
    poly = x * tmp - r
    poly = poly.monic()
    roots = poly.small_roots(beta=0.5,X=2**50)
    if(len(roots) > 0):
        print(roots)
        p = int(roots[0] * tmp - r)
        q = int(int(n) / p)
        print p
        print q
        phin = (p-1) * (q-1)
        d = inverse(65537, phin)
        print(long_to_bytes(pow(enc,d,n)))
#ASIS{f4C7OR1ZIn9_PrimoR!4L_pR1m3z_Iz_3A5Y_I5nt_iT?}

from Crypto.Util.number import *

p = 3825410404746255934165193857151892506649946388303502923742559459860756754338954959067709726395434244171362767397769981378523965557840655385143008725493705117779476208930333229713993176785249759
h1 = 1676692106337556305706016770958074706883705493218787835803500458160553522426125469104058304906236524961048084572483189178908787893713024829966510890627053066279418122862473691624486823188135802
h2 = 2857964008499737244123466571337419134404523101896831014364752478262678705106912578400545946910842379193592617481759402862420715714781790030237246290673584587132334065412406222540095225886964680
h3 = 377100011534086235658104379801079570118458049751793753941421646112566213186676075464534398000332714495426504495371864334278835331209624236632121660999291442470627222536838461859856916754666911
h4 = 1452032184499983915936783392161922013770235576423037573850700970726680707755112154943113287273883628447114298114469426584835959464327248935513505491784021332818735403611670877092428106276909863
v1 = vector(GF(p), (3141592653589793, 2384626433832795))
v2 = vector(GF(p), (288419716939937, 5105820974944592))
v3 = vector(GF(p), (3078164062862089, 9862803482534211))
v4 = vector(GF(p), (7067982148086513, 2823066470938446))

M2 = matrix(GF(p), [[8,-15], [1,0]])
D2, P2 = M2.eigenmatrix_right()
M3 = matrix(GF(p), [[10,-21], [1,0]])
D3, P3 = M3.eigenmatrix_right()
M4 = matrix(GF(p), [[12,-35], [1,0]])
D4, P4 = M4.eigenmatrix_right()

#D2 = matrix(GF(p), [(5, 0), (0, 3)])
#P2 = matrix(GF(p), [(1, 1), (765082080949251186833038771430378501329989277660700584748511891972151350867790991813541945279086848834272553479553996275704793111568131077028601745098741023555895241786066645942798635357049952, 1275136801582085311388397952383964168883315462767834307914186486620252251446318319689236575465144748057120922465923327126174655185946885128381002908497901705926492069643444409904664392261749920)])
#D3 = matrix(GF(p), [(7, 0), (0, 3)])
#P3 = matrix(GF(p), [(1, 1), (2185948802712146248094396489801081432371397936173430242138605405634718145336545690895834129368819568097921581370154275073442266033051803077224576414567831495873986405103047559836567529591571291, 1275136801582085311388397952383964168883315462767834307914186486620252251446318319689236575465144748057120922465923327126174655185946885128381002908497901705926492069643444409904664392261749920)])
#D4 = matrix(GF(p), [(7, 0), (0, 5)])
#P4 = matrix(GF(p), [(1, 1), (2185948802712146248094396489801081432371397936173430242138605405634718145336545690895834129368819568097921581370154275073442266033051803077224576414567831495873986405103047559836567529591571291, 765082080949251186833038771430378501329989277660700584748511891972151350867790991813541945279086848834272553479553996275704793111568131077028601745098741023555895241786066645942798635357049952)])


x = PolynomialRing(GF(p), 3, 'x').gens() #x0 = 3 ** n, x1 = 5 ** n, x2 = 7 ** n
eq1 = (P2 * matrix([(x[1], 0), (0, x[0])]) * P2.inverse() * v2)[0] - h2
eq2 = (P3 * matrix([(x[2], 0), (0, x[0])]) * P3.inverse() * v3)[0] - h3
eq3 = (P4 * matrix([(x[2], 0), (0, x[1])]) * P4.inverse() * v4)[0] - h4
coef1 = eq1.coefficients()
coef2 = eq2.coefficients()
coef3 = eq3.coefficients()
M = matrix(GF(p), [[coef1[0], coef1[1], 0], [coef2[0], 0, coef2[1]], [0, coef3[0], coef3[1]]])
V = vector(GF(p), [-coef1[2], -coef2[2], -coef3[2]])
x1 = (M.solve_right(V))


#x1 = (323329046902641090063821916914889214733305768609826674645407351982586015676987421639484272697201939470382235035866048342328949003281691775418435228342547179889519490780651981623607326249111268, 1315246297419539324688245506876895934319260634588467818820334490448507826163274755787286290814482485617418177738486225985352897448877710490180925428819378496609077233468667062608692030786605857, 3542671701890563818135470308583680279725614927733473296081634543820273039905773553592627037063582410909338675958561677937526038619825357632122515537968439846486526069505230286608279273552304674)

M1 = matrix(GF(p), [[6,-9], [1,0]])
J, P = M1.jordan_form(transformation=True)
#J = matrix(GF(p), [[3,1], [0,3]])
#P = matrix(GF(p), [[3,1], [1,0]])
R.<n> = PolynomialRing(GF(p))
coef_tmp = x[0] * inverse(3, p) % p
poly = (P * matrix([[x[0], coef_tmp * n], [0, x1[0]]]) * P.inverse() * v1)[0] - h1
coef = poly.coefficients()
#coef = [1862804537433814137674592141212998365262553173600162214530962580108992505200230329371147594296246413168437541993667982989942508842725152497824484497082918740009467312966720315420213385921444757, 1559465925935979341256126966986339838730843999630763565734817582956172262848389419421971054281738039299222621119794976851123587362978737244982003174060963620398509807470438712674199365204813873]
print(long_to_bytes(-coef[1] * inverse(coef[0], p) % p))
#p4{on3_w0uld_th1nk_th@t_ma7rices_wou1d_b3_m0re_u5eful_f0r_att@ck1ng_r3currence5}
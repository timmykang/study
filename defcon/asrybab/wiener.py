import sys
import time
import random
import Crypto.PublicKey.RSA
from sympy.ntheory.continued_fraction import continued_fraction_periodic
from sympy.core.compatibility import as_int
from sympy.functions import sqrt
from decimal import *
from reverse import *
import gmpy2
#import argparse
gmpy2.get_context().precision=2048
def isqrt(n):
	n=gmpy2.mpz(n)
	x=gmpy2.sqrt(n)
	return int(x)
def division_euclidienne(a, b):
	return (a // b, a % b)


def fraction_continue(n, d):

  developpement = []
  a = n
  b = d

  while b != 0:

    (q,r) = division_euclidienne(a,b)

    developpement.append(int(q))

    a = b
    b = r
  return (developpement)


#k=31350209530842182031931218707264839820750324129272527437499888608954046175132779281610521901824857
#d=30592399149219799356939845230774449359706797587638413444284816383295657521797252658495003050969
#k=612689745395349404776655454687754488776418525096468023037472311167699657235621980752381645947291727541710082931596
#d=47295860899685847788237295634535769155146577647341071505080065900492121984563875211272818909907355279

def reduites_fraction_continue(a):

  l=len(a)

    

  reduites=[]

  h0 = 1
  h1 = 0
  k0 = 0
  k1 = 1
  
  count = 0

      

  while count < l:

    h = a[count] * h1 + h0
    h0 = h1
    h1 = h

    k = a[count] * k1 + k0
    k0 = k1
    k1 = k

    reduites.append((k,h))

    count += 1

  return (reduites)
def fucking(p,q,d):
    p, q, d = list(map(as_int, [p, q, d]))
    sd = sqrt(d)

    if q == 0:
        raise ValueError("The denominator is zero.")

    if d < 0:
        raise ValueError("Delta supposed to be a non-negative "
                         "integer, got %d" % d)
    elif d == 0 or sd.is_integer:
        # the number is a rational number
        return list(continued_fraction_iterator(Rational(p + sd, q)))

    if (d - p**2)%q:
        d *= q**2
        sd *= q
        p *= abs(q)
        q *= abs(q)

    terms = []
    pq = {}

    #while (p, q) not in pq:
    for i in range(200):
        pq[(p, q)] = len(terms)
        terms.append(int((p + sd)/q))
        p = terms[-1]*q - p
        q = (d - p**2)/q

    i = pq[(p, q)]
    return terms


def weger(n,e):					#continued_fraction(p,q,d):
    p,q,d = e*n+e,(n-1)*(n-1),4*n*e*e
    p, q, d = list(map(as_int, [p, q, d]))
    sd = sqrt(d)
    #sd=Decimal(d).sqrt()
    if q == 0:
		raise ValueError("The denominator is zero.")

    if d < 0:
        raise ValueError("Delta supposed to be a non-negative "
                         "integer, got %d" % d)
    elif d == 0:
        # the number is a rational number
        return list(continued_fraction_iterator(Rational(p + sd, q)))

    if (d - p**2)%q:
        d *= q**2
        sd *= q
        p *= abs(q)
        q *= abs(q)
	
    terms = []
    pq = {}
    message_clair = random.randint(10**1,10**3)
    message_chiffre = pow(message_clair,e,n)
    while(1):
		pq[(p, q)] = len(terms)
		terms.append(int((p + sd)/q))
		p = terms[-1]*q-p
		q = (d - p**2)/q
		reduites = reduites_fraction_continue(terms)
		#print reduites
		reduites=reduites[-1]
		k = reduites[0]
		dd = reduites[1]
		phi = (e*dd-1)/k
		b = n-phi+1
		if len(terms) == 300:
			return -1
		if (b%2 == 1):
			continue
		r= b*b-4*n
		if r<0:
			continue
		p1 = b/2 + isqrt(r)/2
		q1 = b/2 - isqrt(r)/2
		
		if (p1*q1) == n:
			print len(terms)
			return (p1,q1)
		#if (len(terms) == fuck):
		#	print terms
		#	if terms != fuck1:
		#		return -1
		
    return terms

def wiener( n, e):

    

  fc = fraction_continue(e, n) 
    

  reduites = reduites_fraction_continue(fc)

  message_clair = random.randint(10**1,10**3)

  message_chiffre = pow(message_clair, e, n)
  l = len(reduites)

  i = 0
  while i<l:	  
	  #if (tmp >> 334) != 1:
		#  i+=1
		 # continue
	  if(pow(message_chiffre, reduites[i][1], n) == message_clair):
		  break
	  i+=1

  if i != l:

    return (reduites[i][1])

  else:
    return -1
while(1):
	(N,e,d,ppp,phi,p,q) = create_key()
	e = ppp*e
	print e/phi
	print weger(N,e)


#print weger(12120119215602133322044033620536571595581813641825923139834826425798168139298171811249714588285336218940016690177757142852429510973967501242313542037163429292811732377885338056784812029958346398065462819047247334048364569745996338389037340847100406022824771498980724335608347996570301975118459429825017149627243986827813010884124364436363207349271249523804953383246390107875980416368017,157008935139562661148011158241130968004322569797732408370276540868694617024992142386906004938460326535726155557007393512554172093472890412268617105976354360843082749219150140308326929713589965337239228070965675502650492219425632648569779381356387917563426537515278493930671160105928642533819513519859246427486873494730774989409304724280675494228048308098832687939668601916942520628580588903081315119)
n=78186981917377011401837943530993004609374874139988345505285292453980805767409916894189748463214625170859450106428717600117838270920475830475723063083652756148335571512000452112721211954037224024252600626146826512662539633275286812622826718354473534003699741410187002847839315917998566887250342874340484010853
e=80123767140258783574409416122404512267890791942096897899946588168355428594094184506118144728553655872860753259538461428633196680800554058322030670739130772064151981240378734125396032476391897771717839882045318217628058844746350543432770838791717851053458602944064746304775462823822809174314987563975138481387989

(p,q)=weger(n,e)
print p
print q
phi = (p-1)*(q-1)
print e/phi
#e=80123767140258783574409416122404512267890791942096897899946588168355428594094184506118144728553655872860753259538461428633196680800554058322030670739130772064151981240378734125396032476391897771717839882045318217628058844746350543432770838791717851053458602944064746304775462823822809174314987563975138481387989
#n=78186981917377011401837943530993004609374874139988345505285292453980805767409916894189748463214625170859450106428717600117838270920475830475723063083652756148335571512000452112721211954037224024252600626146826512662539633275286812622826718354473534003699741410187002847839315917998566887250342874340484010853
#print a.d
#print weger(136110314277684484327077792058036515915766010063455088384118877278795562932480642249596860481164422051701139230898415566442493116629338944080368074055543748728461673040109068050903383530285906960120844307585718231100135485265240804855620064120340077088858665300189106190017626017476494758964256865710689175321,44732937317213797083266166006413714922208452301194447518854414024881363792182304258030355506764040949341940433266447244807144780384565296747716876298811623227554678961978028136424180400714868424766444835489577201352205639660927268272421610903304526306617761274010594979808978073386196848366948293603278560822708221179375210872458929751443368235039)

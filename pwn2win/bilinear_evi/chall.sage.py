
# This file was *autogenerated* from the file chall.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_4 = Integer(4); _sage_const_113 = Integer(113); _sage_const_9 = Integer(9); _sage_const_64 = Integer(64); _sage_const_16 = Integer(16)
import hashlib

m = _sage_const_113 
F = GF(_sage_const_2 **m, modulus=x**_sage_const_113  + x**_sage_const_9  + _sage_const_1 , names=('z',)); (z,) = F._first_ngens(1)
Fx = F.extension(x**_sage_const_4  + x + _sage_const_1 , names=('t',)); (t,) = Fx._first_ngens(1)

b = _sage_const_1 
E = EllipticCurve(F, [_sage_const_0 , _sage_const_0 , _sage_const_1 , _sage_const_1 , b])
Ex = EllipticCurve(Fx, [_sage_const_0 , _sage_const_0 , _sage_const_1 , _sage_const_1 , b])
h = _sage_const_1 
r = E.cardinality() // h;

flag = open("flag.txt").read().strip()
assert len(flag) <= _sage_const_64 
secret = flag[_sage_const_7 :][:-_sage_const_1 ] # extract secret from CTF-BR{<secret>}
msk = Integer(int(secret.encode("hex"), _sage_const_16 ))

xa = F(Integer(int(hashlib.sha256("Alice").digest().encode('hex'),_sage_const_16 ) % _sage_const_2 **m).bits())
while E.is_x_coord(xa) == false:
	xa*=z;
Pa = h*E.lift_x(xa)
Sa = msk * Pa;

xb = F(Integer(int(hashlib.sha256("Bob").digest().encode('hex'),_sage_const_16 ) % _sage_const_2 **m).bits())
while E.is_x_coord(xb) == false:
	xb*=z;
Pb = h*E.lift_x(xb)
Sb = msk * Pb;

def pairing(P,Q):
	Px = Ex((P.xy()[_sage_const_0 ]),(P.xy()[_sage_const_1 ]))
	(x,y) = ((Q.xy()[_sage_const_0 ]),(Q.xy()[_sage_const_1 ]))
	Qx = Ex(x+t**_sage_const_4 +t**_sage_const_2 ,y+(t**_sage_const_2 +t)*x+t)
	return Px.tate_pairing(Qx,r,_sage_const_4 ,_sage_const_2 **m)
	
sk1 = pairing(Sa,Pb);
sk2 = pairing(Sb,Pa);

assert sk1 == sk2

out = open("data.txt","w")
for p in sk1.list():
	s = "".join(str(e) for e in p.polynomial().list()[::-_sage_const_1 ])
	out.write(hex(Integer(s,_sage_const_2 ))+"\n")



from pwn import *
from Crypto.Util.number import *

x='71 f8 8a 7b 7d 9f f3 ee 9e 56 92 92 83 f1 27 b4 3f 4d ca 00 b5 65 a4 96 dd f8 6b 21 65 30 55 a4 f0 c1 60 c7 af 9a 87 50 8e b5 14 44 bb ce ee ce 65 3d a5 81 8c a4 ff 72 2a 03 b3 2a 5b f1 59 9a 93 a4 de d5 3f d5 f5 c7 f2 16 ed 08 53 c4 4c c2 f9 e9 76 65 4e 1b df a0 e0 fc ce ce d6 97 85 84 f7 e6 29 d7 8f 8b a7 99 89 19 b8 a8 f1 a2 c3 48 61 81 a4 eb 6e 64 80 91 3e 19 f3 12 b9 e5 96 e1 46 03 89 f2 dd 11 b6 5e a3 90 d3 b2 f5 32 1b 1c 45 18 36 77 e7 6d 74 a1 2e 48 b1 de 66 fd e2 3c c7 a2 b3 bd bf b6 64 35 b9 e0 ac 5f a1 bb d4 6a cb 8d 5c 9f cb d7 95 fd 36 25 b5 8f 9d 3d e1 72 09 38 88 c2 33 ec bf ed ab b1 0f 93 78 8d 69 ad 8f bb 38 31 a9 e0 2a fc c3 d1 19 fc 1c 13 8d c3 82 75 aa b1 0a 27 88 79 76 3c 1d 8f f7 5c 44 1f 11 55 ed e6 6c b6 4f e1 b9 bb 80 36 18 22 a5 0c 9c 92 19 ad 04 da 93 8b e8 5d 12 f8 f8 9e 96 7d d7 83 9b f0 ee e4 a1 0b'
tmp = x.split()
key_tmp = []
key = ''
for i in range(280):
    tmp[i] = int(tmp[i],16)
    key_tmp.append(chr(tmp[i]^97))
key_tmp[1] = chr(109)
key_tmp[3] = chr(4^int('75',16))
key_tmp[4] = chr(12^97)
key_tmp[21] = chr(97 ^ int('16',16))
key_tmp[22] = chr(97 ^ int('45',16))
key_tmp[23] = chr(97 ^ int('f5',16))

for i in key_tmp:
    key = key + i

#print key.encode('hex')
key = '106deb716dfe928fff37f3f3e29046d55e2cab61d4772494bc990a40045134c591a001a6cefbe631efd47525daaf8faf045cc4e0edc59e134b62d24b3a9038fbf2c5bfb45eb494a693778c6932a52da3988817042f7abec1819dafafb7f6e4e5968748b6eeeac6f8e878d9c990c3a22900e0c58a0f05e1f05f789273d884f7802762e893bc70d73fc2f1b2d394537a7d24795716860c15c04f29d0bf079c835da6c3d2dcded70554d881cd3ec0dab50baaec3dfeaab6f49c5744d4eefc5c80136859e9a3528dde8ccad06ef219ec08cceeda5950c8814b9da2b0789d7d72eca2e314cbd06b46e918175d7cee963d257e70348c870dd72e80d8dae1577943c46dfdf378cc65bbf2ea893c739999fff71cb6e2fa918f85c06a6cba73c81029a036b43467da4e4be5b747fec20dbef31c78a010cb0f9fc95ee189df26ba0bbe75705fe84823a8fd86c76dee6818032f61779178a467972c803cf6fb07d474b00e33ecaab29f0a62acbb0f179760716980fc4ac7450dd42f634e4dba17155cc05d693640da3dbbe53d22aea6ce47be993d9eaa4c58657d132e182ceb3d39f3393f0bfdfe4eb5abb8861b36303933bc60bc1d011a0f102c5e2d7237852c6296906378f1b0c92a090dd88c0ea6b2ca31df8e4ba078340b0ad7456c0181391306ee32d7e4c2ed03f51686c6e96a3805adeeaaec7c0330cf9365f646266b6c01cc7f3325d2ee831fe5eceac948bf17839559cd7bc681e42b109713ad1478bd31460f28a1261e7d08958c4e4b748e193d275bf9658bdb9bc6eae7faa5840a780aebc4a007729af95a41feea6928d7fb4b99544186647aec015c29c3d9425376f38ea93498c63fa57917573a1c0c98fbe17580cd429a5bf59156bd61666107eca46a56dc851c8d399753406bf4f09c9dff39d2fc94051e18287984303a8c24ae5377b90f77e5d6374750cb4d01365ac9b4bbb71ffebeddea8bac792e22a5777bb8a5f7495a9fcc8e44c6ad9a9b0e742920e9c222a521f1046ff3966a53258c237d9379ae9c9e3e7c17ba7d206def8881e14675c7383305d9b72315ff78056f7fc155bd01293b2269390abddd44a1365cd606dd367287992e99190bf4ef37bffc131b93b3aa6d40d89e01a57305d4859405d2ee67f5327543ab86bce75a9e37ac51cf4d49b463d6b050d891b7609632562e513a6eaef00cf491f6a7efee2e36ce570f0ac9789e0591c5ca287294766cbaaad72a4796cf375e83130c80773106bcdcb6455568b65fdae592eb27d586ef9c5de7a1d964464dfc78a6ac23c6a476ac0226ec72ae9dda33ed972a5f7bfeb5615d509b0814afb55b1ccd472d4948125d5dd2ca8e7c9025d4d56b6326e1a9534ade3a3fea95f09c4705c2f5b1e96b7db2a55e7ab73688400d0852026add44fbeaf297987889579b4f696ee4b6d2cb33bdc8dca170caa1ca1cb72ab3e72e776cd65a77dd666da1ea6d27ccd0be84c4f7ad9c2b361f40743bf9ef9b0adcd376173e852073e75409028d6c541c541c5fc9167210a4578387b0d31655d49b661dab51811faef4627e3e42932a228346a2aa7c00632f2b7f234b8ab2f1db74688a5fe150b0b7d15a1fc48b7d7e5feaed3dc772c5d07e102cd640cfe5a9d205dd6c84e39f68661d06896e3062f20a5b606f5cc720895b62dda88cd6bfe9937755988dfa1d80325e057ccedfdd9f7e086c2e8167fadcc903'.decode('hex')
def decrypt(x, key, key1, index):
    tmp =''
    tmp1 = min(len(x),len(key))
    for i in range(tmp1):
        tmp = tmp + chr(ord(x[i]) ^ ord(key[i%len(key)]) ^ ord(key1[index%16]))
        index = (index + 1) % 16
    return (tmp, index)

def decrypt1(x,key,index):
    tmp = ''
    for i in range(len(x)):
        tmp = tmp + chr(ord(x[i]) ^ ord(key[index%16]))
        index = (index + 1) % 16
    return (tmp, index)

HOST = '3.93.128.89'
SPORT = 12022
DPORT = 12021

client = remote(HOST, SPORT)
srv = remote(HOST, DPORT)


ID = client.recvline().split(': ')[1][:-1]
client.recvline()
print "ID: {}".format(ID)



tmp_key = srv.recv()
index_key = 0
index1_key = 0
#tmp_key = '\x00' * 16
#tmp_key = '\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f'
client.send(tmp_key)


def relaying(srv, client, index_key, index1_key):# key):
    data = client.recv(4096)
    #operation_text = ''
    #buy_last = 0x0600220408021824
    srv.send(data)
    (text, index_key) = decrypt(data, key, tmp_key, index_key)
    print hexdump(text)
    #operation_text = operation_text + text

    data = client.recv(4096)
    #data = '\x7c\x28\xa3\x63\xcc\x52'
    #(data, index_key) = decrypt1(data, tmp_key, index_key)
    srv.send(data)
    (text, index_key) = decrypt(data, key, tmp_key, index_key)
    print hexdump(text)
    #operation_text = operation_text + text
    #tmp = bytes_to_long(operation_text)
    #tmp = tmp ^ buy_last
    #key = key + long_to_bytes(tmp)
    data = srv.recv(4096)
    client.send(data)
    (text, index1_key) = decrypt1(data, tmp_key, index1_key)
    #print hexdump(text)   

    data = srv.recv(4096)
    client.send(data)
    (text, index1_key) = decrypt1(data, tmp_key, index1_key)
    #print text.encode('hex')
    return (index_key, index1_key)#, key)

data = client.recv(1024)
(text, index_key) = decrypt(data, key, tmp_key, index_key)
print hexdump(text)
srv.send(data)

data = client.recv(1024)
(text, index_key) = decrypt(data, key, tmp_key, index_key)
print hexdump(text)
srv.send(data)


data = srv.recv(4096)
client.send(data)
(text, index1_key) = decrypt1(data, tmp_key, index1_key)
print hexdump(text)

data = srv.recv(4096)
#edit first client money   [40,41]
#tmp = '69c281796cec9c87fe2f97d3e3b89ad46ef0aa59ff6d268cba830e48054914df01a909a4dce2f63bcddb7d27caae9759fba33b1f123a61ec4a40d643388830e9e9cdbea44a969bae91678d71ae5ad25c6777e8fbd07b9cc5899fb7ffa5eaece786af6ab9e6e8d6f9f0e021366f3c5dd6ff1fc4a80a0de3e8ff7e806fd087e7d0056de091ac71cfcf730e4d2c6bac8582255b521e8414d5fe5d37d8bb173c827fa9cbd0ccdfcfe5a6217e32c13f254a0a88ea35fcb2360598455adcebec9c82316751ebb353951e77082f910de613f7cdccdc5152d001a1adb0a968975f7de4a0f315d32694b916e7e8a28311971f2176722c849516df2f90ccf8ee5f7b53c575610c87339a440d15763d519d91fdef4ca4fef2939fade26564b863c908b158c94bcb9825b1b4e49542f6c0151ef50e64a813db5fbdc656e399de3e4aba418a8fa017b7dca9df83cf6ff6a8261131697381d8a5459824822cf7e3e7268d4ff1cc13554d9e2864a4b917976664637788f95a07472fdb27615e4ca2d7ee9e3fa296c9bf253c99e33520b6262477ac802d94884350676d1236eed314c2c60cc6c0f4fcdc4abda9a08e092d383823a842b315030a0e08b0a1d28dc87ad39d6991417cf9b2d17a1b11d08e1e8e90c539dd9e4ab8e0ccf4f528ba93fe7e383103e630cf44c4ff1ffd159696cb653007bdefb21ccdfccf306c9a09b927496909ce67f31bc0f08b1bf54cebeb47b7159394412d893f7e1bd4ef68ecac367eb5335e8fd9a53400750d854c4c697b861b2d2643399e49246439151805a4a60c7008f3444a376083e95063f1e26b38d6e3bd66abbe799b8513fe5d0bc7d1404b7ee195a13588d21daa7115473b049067041e8a7f32bd655ad7955ebf7936731be4a67a7efe8a148f29964bd8930b0f636200c62dfdb600161a30d98222268427be0355b60775f5d72fb7e134b2fec9a5364bba951af6bcc52ab5be672626b5d77a9aaaff4b4a9ed46eb63f526564f18bd621cbc42aa73971f56be1886256354c215f9c71ac8c9f26bcec7882df9210777ee06473cf3a2b853387310cef72276077c345bc19dfc4dd96c6f54222bba01458de04c53e609c912f890d29fbe735affd0b876c4c5592bf2761fea45101dc878c55c0f26ff7225d61a48ebef75b86af54ae30b2b64b9c29b172dd99b5783634443259397efed203fc93e6a6f71e9fc931a8f0f536879f2794cdc830b2aa6472b2aec78a46b4c03f5c9312146085c8f9432349baaa699459d2e78a6bd6d194f19458f761db464945fe68a7b4e33d668953fdd9138dafbfdc3bef8faab54becac715772940016bfb443ea32b8d2b6b7eda2a2d3e88a74923ddcc7706b27f1bd7145d6382feb8d6c63b8fa3d0a4e16947c90a15678af669a5c050a422a48d24cf9faf38f008076a864b096911bb7f0ce3bbfd07ca762d6a9c90ce708bcef2c676dceaac62299925e1592d8cdf2bb8cc6ef6da239281744649bf8cd9402dec3770fde77d98c18abf6fd726d761a5c1e4749e77602ba5f869770d1345adc99761cb3917add510b9d81c1bd9208248b44ba2a963071382377014482b0e1da6ce859c21aaf4f482ea51ee689757c4df7e53bdfd248d65c1f24d450cefd5f2dfa22937b1c6097673f02816c2868e0134b6a4d53cf22995a7a2b57732940166c88aa99affe15822a561de87b'
#tmp = tmp.decode('hex')
#(tmp, index1_tmp) = decrypt1(tmp, tmp_key, index1_key)
tmpx = '79af6a0801120e08011864200128dc0130dc0138081a21121d080618a08d06220f0802100118f6ffffffffffffffff0122040802180a18061a04080118201af10808021219100a220f0802100118f6ffffffffffffffff01220408021808121b08011014220f08021001189cffffffffffffffff01220408021850121c08021028220f080210011898f8ffffffffffffff012205080218a006121c08031050220f0802100118f0b1ffffffffffffff012205080218c03e121e080410a001220f0802100118e0f2f9ffffffffffff01220608021880f104121e080510c002220f0802100118c0fbc2ffffffffffff01220608021880ea301219100a220f0802100118f6ffffffffffffffff01220408021808121b08011014220f08021001189cffffffffffffffff01220408021850121c08021028220f080210011898f8ffffffffffffff012205080218a006121c08031050220f0802100118f0b1ffffffffffffff012205080218c03e121e080410a001220f0802100118e0f2f9ffffffffffff01220608021880f104121e080510c002220f0802100118c0fbc2ffffffffffff01220608021880ea301219100a220f0802100118f6ffffffffffffffff01220408021808121b08011014220f08021001189cffffffffffffffff01220408021850121c08021028220f080210011898f8ffffffffffffff012205080218a006121c08031050220f0802100118f0b1ffffffffffffff012205080218c03e121e080410a001220f0802100118e0f2f9ffffffffffff01220608021880f104121e080510c002220f0802100118c0fbc2ffffffffffff01220608021880ea301219100a220f0802100118f6ffffffffffffffff01220408021808121b08011014220f08021001189cffffffffffffffff01220408021850121c08021028220f080210011898f8ffffffffffffff012205080218a006121c08031050220f0802100118f0b1ffffffffffffff012205080218c03e121e080410a001220f0802100118e0f2f9ffffffffffff01220608021880f104121e080510c002220f0802100118c0fbc2ffffffffffff01220608021880ea301219100a220f0802100118f6ffffffffffffffff01220408021808121b08011014220f08021001189cffffffffffffffff01220408021850121c08021028220f080210011898f8ffffffffffffff012205080218a006121c08031050220f0802100118f0b1ffffffffffffff012205080218c03e121e080410a001220f0802100118e0f2f9ffffffffffff01220608021880f104121e080510c002220f0802100118c0fbc2ffffffffffff01220608021880ea301219100a220f0802100118f6ffffffffffffffff01220408021808121b08011014220f08021001189cffffffffffffffff01220408021850121c08021028220f080210011898f8ffffffffffffff012205080218a006121c08031050220f0802100118f0b1ffffffffffffff012205080218c03e121e080410a001220f0802100118e0f2f9ffffffffffff01220608021880f104121e080510c002220f0802100118c0fbc2ffffffffffff01220208021219100a220f0802100118f6ffffffffffffffff01220608021880ea3012170808220f080210011880d39dfbffffffffff012204080218081894b5'.decode('hex')
(text1, xxxxx) = decrypt(tmpx, key, tmp_key, index1_key)
#print hexdump(tmpx)
client.send(data)
(text, index1_key) = decrypt(data, key, tmp_key, index1_key)
#(index_key, index1_key) = hacking(srv, client,index_key, index1_key)
print hexdump(text)
#print text.encode('hex')
#print data.encode('hex')
for i in range(150):
    (index_key, index1_key) = relaying(srv, client, index_key, index1_key)
    


